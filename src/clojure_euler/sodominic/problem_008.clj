(ns clojure-euler.sodominic.problem-008
  (:require
    [clojure.string :as str]))

(def thousand-digits-number "731671765313306249192251196744265747423553491949349698352031277450632623957831801698
                             480186947885184385861560789112949495459501737958331952853208805511125406987471585238
                             630507156932909632952274430435576689664895044524452316173185640309871112172238311362
                             229893423380308135336276614282806444486645238749303589072962904915604407723907138105
                             158593079608667017242712188399879790879227492190169972088809377665727333001053367881
                             220235421809751254540594752243525849077116705560136048395864467063244157221553975369
                             781797784617406495514929086256932197846862248283972241375657056057490261407972968652
                             414535100474821663704844031998900088952434506585412275886668811642717147992444292823
                             086346567481391912316282458617866458359124566529476545682848912883142607690042242190
                             226710556263211111093705442175069416589604080719840385096245544436298123098787992724
                             428490918884580156166097919133875499200524063689912560717606058861164671094050775410
                             0225698315520005593572972571636269561882670428252483600823257530420752963450")

(defn- product-of-numbers-in-string?
  "Returns the product of the all the numbers contained in a string"
  [string-number]
  (reduce * (map read-string (str/split string-number #""))))

(defn solution-008
  "Returns highest product of 13 adjacent digits in the number"
  []
  (loop [current-index 0
         highest-product 0]
    (if (> current-index 986)
      highest-product
      (let [substring (subs thousand-digits-number current-index (+ current-index 13))]
        (if (> (product-of-numbers-in-string? substring) highest-product)
          (recur (inc current-index) (product-of-numbers-in-string? substring))
          (recur (inc current-index) highest-product))))))
