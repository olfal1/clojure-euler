(ns clojure-euler.olfal1.problem-008
  (:require
    [clojure.string :as str]))

(def thousand-digit-number "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450")

(defn- big-number->consecutive-13-digit-numbers
  "Splits a big number string into an array of every 13 consecutive digits."
  [string-number]
  (loop [index 0
         thirteen-digits-numbers []]
    (if (>= (+ index 13) (count string-number))
      thirteen-digits-numbers
      (let [next-index (inc index)
            updated-numbers (conj thirteen-digits-numbers (subs string-number index (+ index 13)))]
        (recur next-index updated-numbers)))))

(defn- string-number->digit-seq
  "Transforms a string number into a vector of the digits of the number."
  [string-number]
  (map read-string (str/split string-number #"")))

(defn- product-of-digits
  "Returns the product of every digits of a number."
  [string-number]
  (reduce * (string-number->digit-seq string-number)))

(defn solution-008
  "Finds the greatest product of 13 consective digits in the 1000-digit number above."
  []
  (->> (big-number->consecutive-13-digit-numbers thousand-digit-number)
       (map product-of-digits)
       (apply max)))
